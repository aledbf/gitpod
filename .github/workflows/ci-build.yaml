name: Unit tests
on:
  push:
    branches:
      - 'main'
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  build-go:
    name: Cache Go dependencies
    runs-on: ubuntu-20.04
    steps:
      - name: Download leeway
        run: |
          sudo curl -sSL https://gist.github.com/aledbf/06ca039e889bbe3c6b06731696d17821/raw/dd6812b1fea9ab71ce1fffbc268cd777ce627980/leeway -o /usr/local/bin/leeway
          sudo chmod +x /usr/local/bin/leeway
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.16.4'
      - name: go modules cache
        uses: actions/cache@v2
        continue-on-error: true
        id: cache-go-pkg-mod
        timeout-minutes: 2
        with:
          path: ~/go
          key: ${{ runner.os }}-go-pkg-mod-${{ hashFiles('go.sum') }}
      - if: steps.cache-go-pkg-mod.outputs.cache-hit != 'true' || steps.cache-go-pkg-mod.outcome == 'failure'
        run: leeway exec --filter-type go -v -- go mod download

  check-go:
    name: Check Go code
    runs-on: ubuntu-20.04
    needs:
      - build-go
    steps:
      - name: Download leeway
        run: |
          sudo curl -sSL https://gist.github.com/aledbf/06ca039e889bbe3c6b06731696d17821/raw/dd6812b1fea9ab71ce1fffbc268cd777ce627980/leeway -o /usr/local/bin/leeway
          sudo chmod +x /usr/local/bin/leeway
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.16.4'
      - name: go modules cache
        uses: actions/cache@v2
        timeout-minutes: 2
        with:
          path: ~/go
          key: ${{ runner.os }}-go-pkg-mod-${{ hashFiles('go.sum') }}
      - name: Check for tidyness of go.mod and go.sum
        run: |
          leeway exec --filter-type go -v -- go mod tidy -v
          git diff --exit-code -- .

  test-go:
    name: Run unit tests
    runs-on: ubuntu-20.04
    needs:
      - build-go
    steps:
      - name: Download leeway
        run: |
          sudo curl -sSL https://gist.github.com/aledbf/06ca039e889bbe3c6b06731696d17821/raw/dd6812b1fea9ab71ce1fffbc268cd777ce627980/leeway -o /usr/local/bin/leeway
          sudo chmod +x /usr/local/bin/leeway
      - name: Create checkout directory
        run: mkdir -p ~/go/src/github.com/gitpod-io
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 10
      - name: Create symlink in GOPATH
        run: ln -s $(pwd) ~/go/src/github.com/gitpod-io/gitpod
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.16.4'
      - name: go modules cache
        uses: actions/cache@v2
        with:
          path: ~/go
          key: ${{ runner.os }}-go-pkg-mod-${{ hashFiles('go.sum') }}
      - name: build gitpod-cli
        run: |
          # TODO: this should not be required
          cd components/gitpod-cli
          go build -o gp
          sudo cp gp /usr/local/bin
          sudo mkdir -p /workspace/.gitpod

          # install libseccomp
          sudo apt update
          sudo apt install -y gperf
          cd $(mktemp -d)
          sudo curl -fsSL https://github.com/seccomp/libseccomp/releases/download/v2.5.1/libseccomp-2.5.1.tar.gz | tar xz
          cd libseccomp-2.5.1 && ./configure && make && sudo make install

          # install kubebuilder test dependencies
          curl -fsSL https://go.kubebuilder.io/dl/2.3.2/linux/amd64 | tar -xz -C /tmp/
          sudo mkdir -p /usr/local/kubebuilder
          sudo mv /tmp/kubebuilder_2.3.2_linux_amd64/* /usr/local/kubebuilder
      - name: Run all unit tests
        run: |
          set -x
          COVERAGE_OUTPUT=$(mktemp -d -t coverage-XXXXXXXXXXX)
          for COMPONENT in $(leeway collect -t '{{ range $n := . }}{{if (and (eq $n.Type "go") (eq ($n.Config.packaging | printf "%v") "app"))}}{{ $n.Metadata.FullName }}{{"\n"}}{{end}}{{end}}');do
            if [[ "$COMPONENT" =~ .*docker-up.* ]]; then
                continue
            fi

            if [[ "$COMPONENT_NAME" == "test" ]]; then
                continue
            fi
            echo "Building $COMPONENT"
            leeway -v --workspace=$PWD build --coverage-output-path=$COVERAGE_OUTPUT $COMPONENT
          done

          ls -lat $COVERAGE_OUTPUT
          curl -s https://codecov.io/bash | bash -s - -s $COVERAGE_OUTPUT
          # SOURCE_BRANCH=%v SOURCE_COMMIT=%v DOCKER_REPO=%v
