name: Unit tests
on:
  push:
    branches:
      - 'main'
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  build-go:
    name: Cache Go dependencies
    runs-on: ubuntu-20.04
    steps:
      - name: Download leeway
        run: |
          sudo curl -sSL https://gist.github.com/aledbf/06ca039e889bbe3c6b06731696d17821/raw/9edf20daf0aaaa50a6e248b4401ce7e7aec3fee5/leeway -o /usr/local/bin/leeway
          sudo chmod +x /usr/local/bin/leeway
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.16.4'
      - name: go modules cache
        uses: actions/cache@v2
        continue-on-error: true
        id: cache-go-pkg-mod
        timeout-minutes: 2
        with:
          path: ~/go
          key: ${{ runner.os }}-go-pkg-mod-${{ hashFiles('go.sum') }}
      - if: steps.cache-go-pkg-mod.outputs.cache-hit != 'true' || steps.cache-go-pkg-mod.outcome == 'failure'
        run: leeway exec --filter-type go -v -- go mod download

  check-go:
    name: Check Go code
    runs-on: ubuntu-20.04
    needs:
      - build-go
    steps:
      - name: Download leeway
        run: |
          sudo curl -sSL https://gist.github.com/aledbf/06ca039e889bbe3c6b06731696d17821/raw/9edf20daf0aaaa50a6e248b4401ce7e7aec3fee5/leeway -o /usr/local/bin/leeway
          sudo chmod +x /usr/local/bin/leeway
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.16.4'
      - name: go modules cache
        uses: actions/cache@v2
        timeout-minutes: 2
        with:
          path: ~/go
          key: ${{ runner.os }}-go-pkg-mod-${{ hashFiles('go.sum') }}
      - name: Check for tidyness of go.mod and go.sum
        run: |
          leeway exec --filter-type go -v -- go mod tidy -v
          git diff --exit-code -- .

  test-go:
    name: Run unit tests
    runs-on: ubuntu-20.04
    needs:
      - build-go
    steps:
      - name: Download leeway
        run: |
          sudo curl -sSL https://gist.github.com/aledbf/06ca039e889bbe3c6b06731696d17821/raw/9edf20daf0aaaa50a6e248b4401ce7e7aec3fee5/leeway -o /usr/local/bin/leeway
          sudo chmod +x /usr/local/bin/leeway
      - name: Download codecov
        run: |
          sudo curl -sSL https://codecov.io/bash -o /usr/local/bin/codecov
          sudo chmod +x /usr/local/bin/codecov
      - name: Create checkout directory
        run: mkdir -p ~/go/src/github.com/gitpod-io
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create symlink in GOPATH
        run: ln -s $(pwd) ~/go/src/github.com/gitpod-io/gitpod
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.16.4'
      - name: go modules cache
        uses: actions/cache@v2
        with:
          path: ~/go
          key: ${{ runner.os }}-go-pkg-mod-${{ hashFiles('go.sum') }}
      - name: build gitpod-cli
        run: |
          # TODO: this should not be required
          cd components/gitpod-cli
          go build -o gp
          sudo cp gp /usr/local/bin
          sudo mkdir -p /workspace/.gitpod

          # install libseccomp
          sudo apt update
          sudo apt install -y gperf
          cd $(mktemp -d)
          sudo curl -fsSL https://github.com/seccomp/libseccomp/releases/download/v2.5.1/libseccomp-2.5.1.tar.gz | tar xz
          cd libseccomp-2.5.1 && ./configure && make && sudo make install

          # install kubebuilder test dependencies
          curl -fsSL https://go.kubebuilder.io/dl/2.3.2/linux/amd64 | tar -xz -C /tmp/
          sudo mkdir -p /usr/local/kubebuilder
          sudo mv /tmp/kubebuilder_2.3.2_linux_amd64/* /usr/local/kubebuilder

          # install gnu parallel
          sudo apt install -y parallel
      - name: Run all unit tests
        run: |
          for COMPONENT in $(leeway collect -t '{{ range $n := . }}{{if (eq $n.Type "go")}}{{ $n.Metadata.FullName }}{{"\n"}}{{end}}{{end}}');do
            COMPONENT_NAME=$(echo $COMPONENT | cut -d: -f1)
            echo ".github/workflows/run-test-coverage.sh $COMPONENT_NAME" >> tasks
          done
          # run tests in parallel
          parallel -j 6 < tasks
          # upload coverage reports
          codecov -k

  analyze:
    name: Project analysis
    runs-on: ubuntu-20.04
    env:
      sonar_secret: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
